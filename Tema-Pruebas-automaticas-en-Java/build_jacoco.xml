<?xml version="1.0" encoding="UTF-8"?>
<!-- 
   Copyright (c) 2009, 2011 Mountainminds GmbH & Co. KG and Contributors
   All rights reserved. This program and the accompanying materials
   are made available under the terms of the Eclipse Public License v1.0
   which accompanies this distribution, and is available at
   http://www.eclipse.org/legal/epl-v10.html
  
   Contributors:
      Marc R. Hoffmann - initial API and implementation
      
   $Id: $
   
   Modified by: Raúl Marticorena
-->
<project name="Example Ant Build with JaCoCo" default="rebuild" xmlns:jacoco="antlib:org.jacoco.ant">

	<description>
	  Example Ant build file that demonstrates how a JaCoCo coverage report
	  can be itegrated into an existing build in three simple steps.
	</description>

	<property name="src.dir" location="./src" />
	<property name="result.dir" location="./result" />
	<property name="result.classes.dir" location="${result.dir}/classes" />
	<property name="result.report.dir" location="${result.dir}/report" />
	<property name="result.exec.file" location="${result.dir}/jacoco.exec" />

	<!-- added Raúl Marticorena -->
	<property name="lib.dir" location="./lib" />

	<!-- added Raúl Marticorena -->
	<!-- Global classpath -->
	<path id="global.classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- Step 1: Import JaCoCo Ant tasks -->
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="${lib.dir}/jacocoant.jar" />
	</taskdef>

	<target name="clean">
		<delete dir="${result.dir}" />
	</target>

	<target name="compile">
		<mkdir dir="${result.classes.dir}" />
		<javac includeantruntime="false" srcdir="${src.dir}" source="1.6" 
			encoding="WINDOWS-1252" destdir="${result.classes.dir}" debug="true">
			<classpath refid="global.classpath" />
		</javac>
	</target>

	<target name="test" depends="compile">
		<!-- Step 2: Wrap test execution with the JaCoCo coverage task -->
		<jacoco:coverage destfile="${result.exec.file}">
			<junit fork="true" forkmode="once">
			  <!--<test name="ejemplos.junit.bytes.ByteTest"/>-->
				<!-- Process all classes with Test sufix -->
				<batchtest>
					<fileset dir="${src.dir}">
						<include name="**/*Test.java" />
					</fileset>
				</batchtest>
				<classpath>
					<pathelement location="${result.classes.dir}" />
				</classpath>
				<classpath refid="global.classpath" />
			</junit>
		</jacoco:coverage>
	</target>

	<target name="report" depends="test">
		<!-- Step 3. Create coverage report -->
		<jacoco:report>

			<!-- This task needs the collected execution data and ... -->
			<executiondata>
				<file file="${result.exec.file}" />
			</executiondata>

			<!-- the class files and optional source files ... -->
			<structure name="JaCoCo Ant Example">
				<classfiles>
					<fileset dir="${result.classes.dir}" />
				</classfiles>
				<sourcefiles encoding="WINDOWS-1252">
					<!-- RMS change the enconding if you need... -->
					<fileset dir="${src.dir}" />
				</sourcefiles>
			</structure>

			<!-- to produce reports in different formats. -->
			<html destdir="${result.report.dir}" />
			<csv destfile="${result.report.dir}/report.csv" />
			<xml destfile="${result.report.dir}/report.xml" />
		</jacoco:report>
	</target>

	<target name="rebuild" depends="clean,compile,test,report" />

</project>